/*
 * Copyright 2024 RAW Labs S.A.
 *
 * Use of this software is governed by the Business Source License
 * included in the file licenses/BSL.txt.
 *
 * As of the Change Date specified in that file, in accordance with
 * the Business Source License, use of this software will be governed
 * by the Apache License, Version 2.0, included in the file
 * licenses/APL.txt.
 */

syntax = "proto3";

option java_package = "com.rawlabs.protocol.das.services";
option java_multiple_files = true;

package com.rawlabs.protocol.das.services;

import "com/rawlabs/protocol/das/das.proto";
import "com/rawlabs/protocol/das/tables.proto";
import "com/rawlabs/protocol/raw/values.proto";

service TablesService {

    rpc GetDefinitions (GetDefinitionsRequest) returns (GetDefinitionsResponse);

    rpc GetRelSize (GetRelSizeRequest) returns (GetRelSizeResponse);

    rpc CanSort (CanSortRequest) returns (CanSortResponse);

    rpc GetPathKeys (GetPathKeysRequest) returns (GetPathKeysResponse);

    rpc Explain (ExplainRequest) returns (ExplainResponse);

    rpc Execute (ExecuteRequest) returns (stream Rows);

    rpc UniqueColumn (UniqueColumnRequest) returns (UniqueColumnResponse);

    rpc ModifyBatchSize (ModifyBatchSizeRequest) returns (ModifyBatchSizeResponse);

    rpc Insert (InsertRequest) returns (InsertResponse);

    rpc BulkInsert (BulkInsertRequest) returns (BulkInsertResponse);

    rpc Update (UpdateRequest) returns (UpdateResponse);

    rpc Delete (DeleteRequest) returns (DeleteResponse);

}

message GetDefinitionsRequest {
    DASId dasId = 1;
}

message GetDefinitionsResponse {
    repeated TableDefinition definitions = 1;
}

message GetRelSizeRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    repeated Qual quals = 3;
    repeated string columns = 4;
}

message GetRelSizeResponse {
    uint64 rows = 1;
    uint32 bytes = 2;
}

message CanSortRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    SortKeys sortKeys = 3;
}

message CanSortResponse {
    SortKeys sortKeys = 1;
}

message GetPathKeysRequest {
    DASId dasId = 1;
    TableId tableId = 2;
}

message GetPathKeysResponse {
    repeated PathKey pathKeys = 1;
}

message PathKey {
    repeated string keyColumns = 1;
    uint64 expectedRows = 2;
}

message ExplainRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    repeated Qual quals = 3;
    repeated string columns = 4;
    optional SortKeys sortKeys = 5;
    optional uint64 limit = 6;
    bool verbose = 7;
}

message ExplainResponse {
    repeated string stmts = 1;
}

message ExecuteRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    repeated Qual quals = 3;
    repeated string columns = 4;
    optional SortKeys sortKeys = 5;
    optional uint64 limit = 6;
    optional string planId = 7;
}

message UniqueColumnRequest {
    DASId dasId = 1;
    TableId tableId = 2;
}

message UniqueColumnResponse {
    string column = 1;
}

message ModifyBatchSizeRequest {
    DASId dasId = 1;
    TableId tableId = 2;
}

message ModifyBatchSizeResponse {
    uint32 size = 1;
}

message InsertRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    Row values = 3;
}

message InsertResponse {
    Row row = 1;
}

message BulkInsertRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    repeated Row values = 3;
}

message BulkInsertResponse {
    repeated Row rows = 1;
}

message UpdateRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    com.rawlabs.protocol.raw.Value rowId = 3;
    Row newValues = 4;
}

message UpdateResponse {
    Row row = 1;
}

message DeleteRequest {
    DASId dasId = 1;
    TableId tableId = 2;
    com.rawlabs.protocol.raw.Value rowId = 3;
}

message DeleteResponse {
}
