/*
 * Copyright 2024 RAW Labs S.A.
 *
 * Use of this software is governed by the Business Source License
 * included in the file licenses/BSL.txt.
 *
 * As of the Change Date specified in that file, in accordance with
 * the Business Source License, use of this software will be governed
 * by the Apache License, Version 2.0, included in the file
 * licenses/APL.txt.
 */

syntax = "proto3";

option java_package = "com.rawlabs.protocol.das.v1.services";
option java_multiple_files = true;

package com.rawlabs.protocol.das.v1.services;

import "com/rawlabs/protocol/das/v1/common/das.proto";
import "com/rawlabs/protocol/das/v1/types/types.proto";
import "com/rawlabs/protocol/das/v1/query/operators.proto";

service RegistrationService {
    rpc Register (RegisterRequest) returns (com.rawlabs.protocol.das.v1.common.DASId);

    rpc OperationsSupported (com.rawlabs.protocol.das.v1.common.DASId) returns (OperationsSupportedResponse);

    rpc Unregister (com.rawlabs.protocol.das.v1.common.DASId) returns (UnregisterResponse);
}

message RegisterRequest {
    com.rawlabs.protocol.das.v1.common.DASDefinition definition = 1;
    optional com.rawlabs.protocol.das.v1.common.DASId id = 2;
}

message OperationsSupportedResponse {
    repeated FunctionSupported functionsSupported = 4;
    repeated OperatorSupported operatorsSupported = 5;
}

message FunctionSupported {
    string name = 1;
    repeated com.rawlabs.protocol.das.v1.types.Type parameters = 2;
}

message OperatorSupported {
    com.rawlabs.protocol.das.v1.query.Operator operator = 1;
    com.rawlabs.protocol.das.v1.types.Type lhs = 2;
    com.rawlabs.protocol.das.v1.types.Type rhs = 3;
}

message UnregisterResponse {
}