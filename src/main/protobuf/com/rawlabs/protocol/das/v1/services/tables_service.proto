/*
 * Copyright 2024 RAW Labs S.A.
 *
 * Use of this software is governed by the Business Source License
 * included in the file licenses/BSL.txt.
 *
 * As of the Change Date specified in that file, in accordance with
 * the Business Source License, use of this software will be governed
 * by the Apache License, Version 2.0, included in the file
 * licenses/APL.txt.
 */

syntax = "proto3";

option java_package = "com.rawlabs.protocol.das.v1.services";
option java_multiple_files = true;

package com.rawlabs.protocol.das.v1.services;

import "com/rawlabs/protocol/das/v1/common/das.proto";
import "com/rawlabs/protocol/das/v1/common/environment.proto";
import "com/rawlabs/protocol/das/v1/tables/tables.proto";
import "com/rawlabs/protocol/das/v1/types/values.proto";
import "com/rawlabs/protocol/das/v1/query/query.proto";

service TablesService {

    rpc GetTableDefinitions (GetTableDefinitionsRequest) returns (GetTableDefinitionsResponse);

    rpc GetTableEstimate (GetTableEstimateRequest) returns (GetTableEstimateResponse);

    rpc ExplainTable (ExplainTableRequest) returns (ExplainTableResponse);

    rpc ExecuteTable (ExecuteTableRequest) returns (stream com.rawlabs.protocol.das.v1.tables.Rows);

    rpc GetTableUniqueColumn (GetTableUniqueColumnRequest) returns (GetTableUniqueColumnResponse);

    rpc InsertTable (InsertTableRequest) returns (InsertTableResponse);

    rpc GetBulkInsertTableSize (GetBulkInsertTableSizeRequest) returns (GetBulkInsertTableSizeResponse);

    rpc BulkInsertTable (BulkInsertTableRequest) returns (BulkInsertTableResponse);

    rpc UpdateTable (UpdateTableRequest) returns (UpdateTableResponse);

    rpc DeleteTable (DeleteTableRequest) returns (DeleteTableResponse);

}

message GetTableDefinitionsRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message GetTableDefinitionsResponse {
    repeated com.rawlabs.protocol.das.v1.tables.TableDefinition definitions = 1;
}

message GetTableEstimateRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    com.rawlabs.protocol.das.v1.query.Query query = 3;
    optional string plan_id = 4;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message GetTableEstimateResponse {
    uint64 rows = 1;
    uint32 bytes = 2;
}

message ExplainTableRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    com.rawlabs.protocol.das.v1.query.Query query = 3;
    optional string plan_id = 4;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message ExplainTableResponse {
    repeated string stmts = 1;
}

message ExecuteTableRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    com.rawlabs.protocol.das.v1.query.Query query = 3;
    optional string plan_id = 4;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message GetTableUniqueColumnRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message GetTableUniqueColumnResponse {
    string column = 1;
}

message InsertTableRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    com.rawlabs.protocol.das.v1.tables.Row values = 3;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message InsertTableResponse {
    com.rawlabs.protocol.das.v1.tables.Row row = 1;
}

message GetBulkInsertTableSizeRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message GetBulkInsertTableSizeResponse {
    uint32 size = 1;
}

message BulkInsertTableRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    repeated com.rawlabs.protocol.das.v1.tables.Row values = 3;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message BulkInsertTableResponse {
    repeated com.rawlabs.protocol.das.v1.tables.Row rows = 1;
}

message UpdateTableRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    com.rawlabs.protocol.das.v1.types.Value row_id = 3;
    com.rawlabs.protocol.das.v1.tables.Row new_values = 4;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message UpdateTableResponse {
    com.rawlabs.protocol.das.v1.tables.Row row = 1;
}

message DeleteTableRequest {
    com.rawlabs.protocol.das.v1.common.DASId das_id = 1;
    com.rawlabs.protocol.das.v1.tables.TableId table_id = 2;
    com.rawlabs.protocol.das.v1.types.Value row_id = 3;
    optional com.rawlabs.protocol.das.v1.common.Environment env = 99;
}

message DeleteTableResponse {
}
